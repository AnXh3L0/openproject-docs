---
source_path: docs/api/apiv3/introduction.apib
---
<div><div class="description"><p>Please note that we intend to keep this specification as accurate and stable as possible, however work on the API <em>v3</em> is still ongoing
and not all resources and actions in OpenProject are yet accessible through the API.</p>
<p>This document will be subject to changes as we add more endpoints and functionality to the API. The development version of this document
may have breaking changes while we work on new endpoints for the application.</p>
<p>We try to keep stable releases of OpenProject with changes to this API backwards compatible whenever possible.</p>
<h2 id="header-hypermedia-rest-api-1">Hypermedia REST API <a class="permalink" href="#header-hypermedia-rest-api-1" aria-hidden="true">¶</a></h2>
<p>The APIv3 is a hypermedia REST API, a shorthand for “Hypermedia As The Engine Of Application State” (HATEOAS).
This means that each endpoint of this API will have links to other resources or actions defined in the resulting body.</p>
<p>These related resources and actions for any given resource will be context sensitive. For example, only actions that the
authenticated user can take are being rendered. This can be used to dynamically identify actions that the user might take for any
given response.</p>
<p>As an example, if you fetch a work package through the <a href="#work-packages">Work Package endpoint</a>, the <code>update</code> link will only
be present when the user you authenticated has been granted a permission to update the work package in the assigned project.</p>
<h2 id="header-hal+json-1">HAL+JSON <a class="permalink" href="#header-hal+json-1" aria-hidden="true">¶</a></h2>
<p>HAL is a simple format that gives a consistent and easy way to hyperlink between resources in your API.
Read more in the following specification: <a href="https://tools.ietf.org/html/draft-kelly-json-hal-08">https://tools.ietf.org/html/draft-kelly-json-hal-08</a></p>
<p><strong>OpenProject API implementation of HAL+JSON format</strong> enriches JSON and introduces a few meta properties:</p>
<ul>
<li><code>_type</code> - specifies the type of the resource (e.g.: WorkPackage, Project)
<ul>
<li><code>_links</code> - contains all related resource and action links available for the resource</li>
<li><code>_embedded</code> - contains all embedded objects</li>
</ul>
</li>
</ul>
<p>HAL does not guarantee that embedded resources are embedded in their full representation, they might as well be
partially represented (e.g. some properties can be left out).
However in this API you have the guarantee that whenever a resource is <strong>embedded</strong>, it is embedded in its <strong>full representation</strong>.</p>
<h2 id="header-api-response-structure-1">API response structure <a class="permalink" href="#header-api-response-structure-1" aria-hidden="true">¶</a></h2>
<p>All API responses contain a single HAL+JSON object, even collections of objects are technically represented by
a single HAL+JSON object that itself contains its members. More details on collections can be found
in the <a href="#collections">Collections Section</a>.</p>
<h1 id="header-authentication-1">Authentication <a class="permalink" href="#header-authentication-1" aria-hidden="true">¶</a></h1>
<p>For now the API only supports two authentication schemes: session based authentication and basic auth.
Depending on the settings of the OpenProject instance many resources can be accessed without being authenticated.
In case the instance requires authentication on all requests the client will receive an <strong>HTTP 401</strong> status code
in response to any request.
Otherwise unauthenticated clients have all the permissions of the anonymous user.</p>
<h2 id="header-session-based-authentication-1">Session-based Authentication <a class="permalink" href="#header-session-based-authentication-1" aria-hidden="true">¶</a></h2>
<p>This means you have to login to OpenProject via the Web-Interface to be authenticated in the API.
This method is well-suited for clients acting within the browser, like the Angular-Client built into OpenProject.</p>
<p>In this case, you always need to pass the HTTP header <code>X-Requested-With &quot;XMLHttpRequest&quot;</code> for authentication.</p>
<h2 id="header-api-key-through-basic-auth-1">API Key through Basic Auth <a class="permalink" href="#header-api-key-through-basic-auth-1" aria-hidden="true">¶</a></h2>
<p>Users can authenticate towards the API v3 using basic auth with ‘apikey’ as the user name and their API key as the password. Users can find their API key on their account page.</p>
<p>Example:</p>
<pre><code class="language-bash">API_KEY=<span class="hljs-number">2519132</span>cdf62dcf5a66fd96394672079f9e9cad1
curl -u apikey:<span class="hljs-variable">$API_KEY</span> https://community.openproject.com/api/v3/users/<span class="hljs-number">42</span></code></pre>
<h2 id="header-oauth2.0-authentication-1">OAuth2.0 authentication <a class="permalink" href="#header-oauth2.0-authentication-1" aria-hidden="true">¶</a></h2>
<p>OpenProject allows authentication and authorization with OAuth2 with <em>Authorization code flow</em>, as well as <em>Client credentials</em> operation modes.</p>
<p>To get started, you first need to register an application in the OpenProject OAuth administration section of your installation.
This will save an entry for your application with a client unique identifier (<code>client_id</code>) and an accompanying secret key (<code>client_secret</code>).</p>
<p>You can then use one the following guides to perform the supported OAuth 2.0 flows:</p>
<ul>
<li>
<p><a href="https://oauth.net/2/grant-types/authorization-code">Authorization code flow</a></p>
</li>
<li>
<p><a href="https://oauth.net/2/grant-types/client-credentials/">Client credentials</a> - Requires an application to be bound to an impersonating user for non-public access</p>
</li>
</ul>
<h2 id="header-why-not-username-and-password?-1">Why not username and password? <a class="permalink" href="#header-why-not-username-and-password?-1" aria-hidden="true">¶</a></h2>
<p>The simplest way to do basic auth would be to use a user’s username and password naturally.
However, OpenProject already has supported API keys in the past for the API v2, though not through basic auth.</p>
<p>Using <strong>username and password</strong> directly would have some advantages:</p>
<ul>
<li>
<p>It is intuitive for the user who then just has to provide those just as they would when logging into OpenProject.</p>
</li>
<li>
<p>No extra logic for token managment necessary.</p>
</li>
</ul>
<p>On the other hand using <strong>API keys</strong> has some advantages too, which is why we went for that:</p>
<ul>
<li>
<p>If compromised while saved on an insecure client the user only has to regenerate the API key instead of changing their password, too.</p>
</li>
<li>
<p>They are naturally long and random which makes them invulnerable to dictionary attacks and harder to crack in general.</p>
</li>
</ul>
<p>Most importantly users may not actually have a password to begin with. Specifically when they have registered
through an OpenID Connect provider.</p>
<h1 id="header-allowed-http-methods-1">Allowed HTTP methods <a class="permalink" href="#header-allowed-http-methods-1" aria-hidden="true">¶</a></h1>
<ul>
<li>
<p><code>GET</code> - Get a single resource or collection of resources</p>
</li>
<li>
<p><code>POST</code> - Create a new resource or perform</p>
</li>
<li>
<p><code>PATCH</code> - Update a resource</p>
</li>
<li>
<p><code>DELETE</code> - Delete a resource</p>
</li>
</ul>
<h1 id="header-compression-1">Compression <a class="permalink" href="#header-compression-1" aria-hidden="true">¶</a></h1>
<p>Responses are compressed if requested by the client. Currently <a href="http://www.gzip.org/">gzip</a> and <a href="https://tools.ietf.org/html/rfc1951">deflate</a>
are supported. The client signals the desired compression by setting the <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3"><code>Accept-Encoding</code> header</a>.
If no <code>Accept-Encoding</code> header is send, <code>Accept-Encoding: identity</code> is assumed which will result in the API responding uncompressed.</p>
</div></div>
