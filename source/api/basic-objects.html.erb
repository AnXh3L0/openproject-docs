---
source_path: docs/api/apiv3/basic-objects.apib
---
<div><div class="description"></div><h1>Basic Objects</h1><div class="panel panel-default"><div class="panel-body"><h1 id="header-links-1">Links <a class="permalink" href="#header-links-1" aria-hidden="true">¶</a></h1>
<p>Links to other resources in the API are represented uniformly by so called link objects.</p>
<h2 id="header-local-properties-1">Local Properties <a class="permalink" href="#header-local-properties-1" aria-hidden="true">¶</a></h2>
<table>
<thead>
<tr>
<th style="text-align:center">Property</th>
<th>Description</th>
<th>Type</th>
<th style="text-align:center">Required</th>
<th style="text-align:center">Nullable</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">href</td>
<td>URL to the referenced resource (might be relative)</td>
<td>String</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td>Representative label for the resource</td>
<td>String</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td style="text-align:center">templated</td>
<td>If true the <code>href</code> contains parts that need to be replaced by the client</td>
<td>Boolean</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>false</td>
</tr>
<tr>
<td style="text-align:center">method</td>
<td>The HTTP verb to use when requesting the resource</td>
<td>String</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>GET</td>
</tr>
<tr>
<td style="text-align:center">payload</td>
<td>The payload to send in the request to achieve the desired result</td>
<td>String</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>unspecified</td>
</tr>
<tr>
<td style="text-align:center">identifier</td>
<td>An optional unique identifier to the link object</td>
<td>String</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td>unspecified</td>
</tr>
</tbody>
</table>
<p>All link objects <em>must</em> contain the <code>href</code> property, though it might be <code>null</code>. Thus the following is a valid
link object:</p>
<p>{
“href”: null
}</p>
<p>whereas <code>{ }</code> is not a valid link object. The meaning of <code>&quot;href&quot;: null</code> is that <strong>no</strong> resource is referenced.
For example a work package without an assignee will still have an assignee link, but its <code>href</code> will be <code>null</code>.</p>
<p>If a <code>title</code> is present, the client can display the title to the user when referring to the resource.</p>
<p>Templated links are links that contain client replaceable parts. Replaceable parts are enclosed in braces. For example
the link <code>api/v3/example/{id}</code> is not complete in itself, but the client needs to replace the string <code>{id}</code> itself.
As of now the API does not indicate the valid replacement values.</p>
<p>The <code>method</code> indicates which HTTP verb the client <em>must</em> use when following the link for the intended purpose.</p>
<p>If a <code>payload</code> is specified, it needs to be sent as the body of the request to achieve the desired result (e.g. perform the
action represented by the link). If no <code>payload</code> is specified, there is either no payload to send or a valid payload is not specified
by the link object. A payload might also be templated slightly. If the <code>templated</code> property is true, a payload might contain replaceable parts
in its strings (e.g. <code>{ &quot;href&quot;: &quot;/api/v3/examples/{example_id}&quot; }</code>).</p>
<p>Note: When writing links (e.g. during a <code>PATCH</code> operation) only changes to <code>href</code> are accepted.
Changes to all other properties will be <strong>silently ignored</strong>.</p>
<h1 id="header-errors-1">Errors <a class="permalink" href="#header-errors-1" aria-hidden="true">¶</a></h1>
<p>In case of an error, the API will respond with an apropriate HTTP status code.
For responses with an HTTP status of <code>4xx</code> and <code>5xx</code> the body will always contain a single error object.
Error objects shall give the client additional details about the cause of an errorneous response.</p>
<h2 id="header-general-errors-1">General errors <a class="permalink" href="#header-general-errors-1" aria-hidden="true">¶</a></h2>
<ul>
<li>
<p>Error objects have their <code>_type</code> set to <code>Error</code></p>
</li>
<li>
<p>The <code>errorIdentifier</code> serves as a unique (and machine readable) identifier for a specific error cause</p>
<ul>
<li>There <em>may</em> be multiple possible error identifiers per HTTP status code</li>
<li>There <em>may</em> be multiple possible HTTP status codes per error identifier</li>
<li>The “List of Error Identifiers” defines the possible mappings between HTTP status and error identifier</li>
</ul>
</li>
<li>
<p>The <code>message</code> contains a human readable concise message describing the error</p>
<ul>
<li>It <em>optionally</em> includes specific information, for example which permission would have been needed to perform an action</li>
<li>It is localized depending on the users preferences</li>
<li>It <em>must not</em> include HTML or other kind of markup</li>
<li>Error messages form complete sentences including punctuation</li>
</ul>
</li>
</ul>
<h3 id="header-example-5">Example <a class="permalink" href="#header-example-5" aria-hidden="true">¶</a></h3>
<p>{
“_type”: “Error”,
“errorIdentifier”: “urn:openproject-org:api:v3:errors:InternalServerError”,
“message”: “An internal server error occured. This is not your fault.”
}</p>
<h2 id="header-embedded-error-information-1">Embedded error information <a class="permalink" href="#header-embedded-error-information-1" aria-hidden="true">¶</a></h2>
<p>Errors might optionally contain embedded objects that contain further information.</p>
<h3 id="header-error-details-1">Error details <a class="permalink" href="#header-error-details-1" aria-hidden="true">¶</a></h3>
<p>Under the embedded key <code>details</code> there might be an object describing the error more verbosely. For example if the
error affects a specific field, this field could be defined there.</p>
<h4 id="header-example-6">Example <a class="permalink" href="#header-example-6" aria-hidden="true">¶</a></h4>
<p>{
“_type”: “Error”,
“errorIdentifier”: “urn:openproject-org:api:v3:examples:ExampleError”,
“message”: “This is an example error.”,
“_embedded”: {
“details”: {
“_type”: “ExampleErrorDetailInformation”,
“errorneousField”: “subject”
}
}
}</p>
<h3 id="header-multiple-error-objects-1">Multiple error objects <a class="permalink" href="#header-multiple-error-objects-1" aria-hidden="true">¶</a></h3>
<p>To ease implementation of basic clients it is guaranteed that the response body always only contains a single error object.
However it is allowed that an error object <em>embeds</em> other error objects under the key <code>errors</code>, thereby aggregating them.</p>
<p>The <code>errorIdentifier</code> of such an object is always <code>urn:openproject-org:api:v3:errors:MultipleErrors</code>. The message can either describe one of the
embedded errors or simply state that multiple errors occured.</p>
<h4 id="header-example-7">Example <a class="permalink" href="#header-example-7" aria-hidden="true">¶</a></h4>
<p>{
“_type”: “Error”,
“errorIdentifier”: “urn:openproject-org:api:v3:errors:MultipleErrors”,
“message”: “Multiple fields violated their constraints.”,
“_embedded”: {
“errors”: [
{
“_type”: “Error”,
“errorIdentifier”: “urn:openproject-org:api:v3:errors:PropertyConstraintViolation”,
“…”: “…”
},
{
“_type”: “Error”,
“errorIdentifier”: “urn:openproject-org:api:v3:errors:PropertyConstraintViolation”,
“…”: “…”
}
]
}
}</p>
<h2 id="header-list-of-error-identifiers-1">List of Error Identifiers <a class="permalink" href="#header-list-of-error-identifiers-1" aria-hidden="true">¶</a></h2>
<ul>
<li>
<p><code>urn:openproject-org:api:v3:errors:InvalidQuery</code> (<strong>HTTP 400</strong>) - The query contained a value that did not match the servers expectation</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:InvalidRequestBody</code> (<strong>HTTP 400</strong>) - The format of the request body did not match the servers expectation</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:InvalidRenderContext</code> (<strong>HTTP 400</strong>) - The client specified a rendering context that does not exist</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:InvalidUserStatusTransition</code> (<strong>HTTP 400</strong>) - The client used an invalid transition in the attempt to change the status of a user account.</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:Unauthenticated</code> (<strong>HTTP 401</strong>) - The client has to authenticate to access the requested resource.</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:MissingPermission</code> (<strong>HTTP 403</strong>) - The client does not have the needed permissions to perform the requested action</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:NotFound</code> (<strong>HTTP 404</strong>) - Default for HTTP 404 when no further information is available</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:UpdateConflict</code> (<strong>HTTP 409</strong>) - The resource changed between GET-ing it and performing an update on it</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:TypeNotSupported</code> (<strong>HTTP 415</strong>) - The request contained data in an unsupported media type (Content-Type)</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:PropertyIsReadOnly</code> (<strong>HTTP 422</strong>) - The client tried to set or change a property that is not writable</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:PropertyConstraintViolation</code> (<strong>HTTP 422</strong>) - The client tried to set a property to an invalid value</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:PropertyValueNotAvailableAnymore</code> (<strong>HTTP 422</strong>) - An unchanged property needs to be changed, because other changes to the resource make it unavailable</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:ResourceTypeMismatch</code> (<strong>HTTP 422</strong>) - A link to a resource of a specific type was expected, but the link to another type of resource was provided</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:PropertyFormatError</code> (<strong>HTTP 422</strong>) - A property value was provided in a format that the server does not understand or accept</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:InternalServerError</code> (<strong>HTTP 500</strong>) - Default for HTTP 500 when no further information is available</p>
</li>
<li>
<p><code>urn:openproject-org:api:v3:errors:MultipleErrors</code> - Multiple errors occured. See the embedded <code>errors</code> array for more details.</p>
</li>
</ul>
<h1 id="header-formattable-text-1">Formattable Text <a class="permalink" href="#header-formattable-text-1" aria-hidden="true">¶</a></h1>
<p>OpenProject supports text formatting in Markdown. Properties that contain formattable text have a special representation in this API. In this specification their
type is indicated as <code>Formattable</code>. Their representation contains the following properties:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Property</th>
<th>Description</th>
<th>Type</th>
<th>Example</th>
<th>Supported operations</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">format</td>
<td>Indicates the formatting language of the raw text</td>
<td>String</td>
<td>markdown</td>
<td>READ</td>
</tr>
<tr>
<td style="text-align:center">raw</td>
<td>The raw text, as entered by the user</td>
<td>String</td>
<td><code>I **am** formatted!</code></td>
<td>READ / WRITE</td>
</tr>
<tr>
<td style="text-align:center">html</td>
<td>The text converted to HTML according to the format</td>
<td>String</td>
<td><code>I &lt;strong&gt;am&lt;/strong&gt; formatted!</code></td>
<td>READ</td>
</tr>
</tbody>
</table>
<p><code>format</code> can as of today have one of the following values:</p>
<ul>
<li>
<p><code>plain</code> - only basic formatting, e.g. inserting paragraphs and line breaks into HTML</p>
</li>
<li>
<p><code>markdown</code> - formatting using Markdown</p>
</li>
<li>
<p><code>custom</code> - There is no apparent formatting rule that transforms the raw version to HTML (only used for read only properties)</p>
</li>
</ul>
<p>Note that <code>raw</code> is the only property supporting the <strong>write</strong> operation. A property of type <em>Formattable</em> that
is marked as <strong>read and write</strong>, will only accept changes to the <code>raw</code> property. Changes to <code>format</code> and <code>html</code> will be <strong>silently ignored</strong>.
It is thus sufficient to solely provide the <code>raw</code> property for changes.</p>
<p>If the <em>Formattable</em> is marked as <strong>read only</strong>, the <code>raw</code> attribute also becomes <strong>read only</strong>.</p>
<h4 id="header-example-8">Example <a class="permalink" href="#header-example-8" aria-hidden="true">¶</a></h4>
<p>{
“format”: “markdown”,
“raw”: “I <strong>am</strong> formatted!”,
“html”: “I <strong>am</strong> formatted!”
}</p>
<h1 id="header-dates,-times-and-durations-1">Dates, Times and Durations <a class="permalink" href="#header-dates,-times-and-durations-1" aria-hidden="true">¶</a></h1>
<p>Representation of time related values in this API is done according to <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>.
In this specification the following terms will be used as type specifiers (e.g. in tables):</p>
<ul>
<li>
<p><code>Date</code> - refers to an ISO 8601 date, e.g. “2014-05-21”</p>
</li>
<li>
<p><code>DateTime</code> - refers to an ISO 8601 combined date and time, e.g. “2014-05-21T13:37:00Z”</p>
</li>
<li>
<p><code>Duration</code> - refers to an ISO 8601 duration, e.g. “P1DT18H”</p>
</li>
</ul>
<h1 id="header-colors-1">Colors <a class="permalink" href="#header-colors-1" aria-hidden="true">¶</a></h1>
<p>Colors are represented in RGB using hexadecimal notation as specified in <a href="http://www.w3.org/TR/css3-color/">CSS Color Module Level 3</a>.
That is a <code>#</code> followed by either three or six hexadecimal digits.</p>
<h4 id="header-examples-1">Examples <a class="permalink" href="#header-examples-1" aria-hidden="true">¶</a></h4>
<p>red:   #ff0000 or #f00
green: #00ff00 or #0f0
black: #000000 or #000
white: #ffffff or #fff</p>
<h1 id="header-digests-1">Digests <a class="permalink" href="#header-digests-1" aria-hidden="true">¶</a></h1>
<p>Digests (or Hashes) are one way functions that map data of arbitrary size to data of a fixed size.
In OpenProject they are for example used to calculate checksums for (attachment) files.
The checksum calculated depends on the hashed data and the algorithm used as hash function.</p>
<p>Therefore all digests are represented in the following form:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Property</th>
<th>Description</th>
<th>Type</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">algorithm</td>
<td>The algorithm used to compute the digest</td>
<td>String</td>
<td>md5</td>
</tr>
<tr>
<td style="text-align:center">hash</td>
<td>The calculated digest in hexadecimal notation</td>
<td>String</td>
<td>64c26a8403cd796ea4cf913cda2ee4a9</td>
</tr>
</tbody>
</table>
<h4 id="header-example-9">Example <a class="permalink" href="#header-example-9" aria-hidden="true">¶</a></h4>
<p>{
“algorithm”: “md5”,
“hash”: “64c26a8403cd796ea4cf913cda2ee4a9”
}</p>
</div></div></div>
